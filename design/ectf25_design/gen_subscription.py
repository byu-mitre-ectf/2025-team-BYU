import argparse
import json
from pathlib import Path
import struct, hmac, hashlib
from loguru import logger
from Crypto.Cipher import ChaCha20_Poly1305
from Crypto.Random import get_random_bytes

def take_hmac(key, message):
    hmac_object = hmac.new(key, digestmod=hashlib.sha256)
    hmac_object.update(message)
    return hmac_object.digest()

def gen_subscription(
    secrets: bytes, device_id: int, start: int, end: int, channel: int
) -> bytes:
    """Generate the contents of a subscription.
 
The output of this will be passed to the Decoder using ectf25.tv.subscribe
 
    :param secrets: Contents of the secrets file generated by ectf25_design.gen_secrets
    :param device_id: Device ID of the Decoder
    :param start: First timestamp the subscription is valid for
    :param end: Last timestamp the subscription is valid for
    :param channel: Channel to enable
    """

    # Load the json of the secrets file
    secrets = json.loads(secrets)
    
    # Concatenate DeviceID, StartTimeStamp, EndTimeStamp, Channel, and Channel Key
    # Pack device_id (unsigned int), start (unsigned long long), end (unsigned long long), and channel (unsigned int) into binary format (as per the design?)
    packed_numbers = struct.pack("<IQQI", device_id, start, end, channel)
    
    # Retrieve the channel key from secrets.
    # (This will likely need to be changed as I don't actually know how the secrets are stored...)
    channel_key = secrets["channel_keys"][str(channel)]

    # Append the channel key (converted to bytes) to the packed numbers
    source_message = packed_numbers + bytes.fromhex(channel_key)
    
    # Get RSA device private key from global secrets.
    sub_key = bytes.fromhex(secrets["subscription_key"])
    aad = get_random_bytes(4)
    nonce = get_random_bytes(12)

    cipher = ChaCha20_Poly1305.new(key=sub_key, nonce=nonce)
    cipher.update(aad + nonce)
    
    ciphertext, tag = cipher.encrypt_and_digest(source_message)
    
    # Final message
    final_subscription = aad + nonce + tag + ciphertext
 
    # Pack the subscription. This will be sent to the decoder with ectf25.tv.subscribe
    return final_subscription
 
 
def parse_args():
    """Define and parse the command line arguments
 
    NOTE: Your design must not change this function
    """
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--force",
        "-f",
        action="store_true",
        help="Force creation of subscription file, overwriting existing file",
    )
    parser.add_argument(
        "secrets_file",
        type=argparse.FileType("rb"),
        help="Path to the secrets file created by ectf25_design.gen_secrets",
    )
    parser.add_argument("subscription_file", type=Path, help="Subscription output")
    parser.add_argument(
        "device_id", type=lambda x: int(x, 0), help="Device ID of the update recipient."
    )
    parser.add_argument(
        "start", type=lambda x: int(x, 0), help="Subscription start timestamp"
    )
    parser.add_argument("end", type=int, help="Subscription end timestamp")
    parser.add_argument("channel", type=int, help="Channel to subscribe to")
    return parser.parse_args()
 
 
def main():
    """Main function of gen_subscription
 
    You will likely not have to change this function
    """
    # Parse the command line arguments
    args = parse_args()
 
    subscription = gen_subscription(
        args.secrets_file.read(), args.device_id, args.start, args.end, args.channel
    )
 
    # Print the generated subscription for your own debugging
    # Attackers will NOT have access to the output of this (although they may have
    # subscriptions in certain scenarios), but feel free to remove
    #
    # NOTE: Printing sensitive data is generally not good security practice
    logger.debug(f"Generated subscription: {subscription}")
 
    # Open the file, erroring if the file exists unless the --force arg is provided
    with open(args.subscription_file, "wb" if args.force else "xb") as f:
        f.write(subscription)
 
    # For your own debugging. Feel free to remove
    logger.success(f"Wrote subscription to {str(args.subscription_file.absolute())}")
 
 
if __name__ == "__main__":
    main()